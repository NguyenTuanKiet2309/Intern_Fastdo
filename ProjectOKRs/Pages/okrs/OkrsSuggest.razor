@page "/okr/suggest"
@inject IJSRuntime jsruntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

<section class="main_content @(_loaded ? "" : "is-loading")">
    <div class="card flex_column is_fullheight">
        <ul class="columns is-vcentered is-variable is-2 is-mobile is-multiline mb-2">
            <li class="column is-full-mobile">
                <h1 class="title is-5 is-size-6-mobile has-text-info">
                    OKRs - GÓP Ý MỤC TIÊU
                </h1>
            </li>
            <li class="column is-one-fifth is-full-mobile">
                <div class="select is-fullwidth">
                    <select @onchange="ChangeType">
                        <option value="">Chọn lý do</option>
                        @foreach (var sl in listConfigSuggest)
                        {
                            <option value="@sl.id">@sl.name</option>
                        }
                    </select>
                </div>
            </li>

            <li class="column is-narrow">
                <a class="button is-link" @onclick="Edit">
                    <span class="icon">
                        <i class="material-icons-outlined is-size-6">add</i>
                    </span>
                    <span>Thêm mới</span>
                </a>
            </li>
        </ul>
        <div class="inner_section scrolly" style="flex:1">
            <table class="table is-striped is-noborder is-fullwidth is-responsive">
                <thead>
                    <tr class="is-size-7" style="border-bottom: 1px solid #DEDEDE;">
                        <th class="pt-0">Nội dung góp ý</th>
                        <th class="pt-0" width="15%">Gửi đến</th>
                        <th class="pt-0" width="20%">Lý do bạn muốn góp ý</th>
                        <th class="pt-0" width="160px">Ngày gửi</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in dataList)
                    {
                        var type = listConfigSuggest.SingleOrDefault(x => x.id == item.type);

                        <tr>
                            <td>
                                <div class="is-word-break">
                                    @item.name
                                </div>
                            </td>
                            <td>
                                <label class="td-label">Gửi đến</label>
                                <div class="td-value">
                                    TỔNG CÔNG TY
                                </div>
                            </td>
                            <td>
                                <label class="td-label">Lý do</label>
                                <div class="td-value">
                                    @(type != null ? type.name : "Không xác định")
                                </div>
                            </td>
                            <td>
                                <label class="td-label">Ngày gửi</label>
                                <div class="td-value">
                                    @string.Format("{0:HH:mm - dd/MM/yyyy}", new DateTime(item.date))
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</section>

@if (drafts != null)
{
    <Slider Size="is-large">
        <Header>
            <div class="columns is-variable is-2 is-mobile is-vcentered">
                <div class="column">
                    <div class="has-text-weight-bold is-size-5">
                        Tạo góp ý mục tiêu
                    </div>
                </div>
                <div class="column is-narrow">
                    <Button Content="Hủy tạo" IconLeft="close" Onclick="() => drafts = null" />
                </div>
            </div>
        </Header>

        <Body>
            @foreach (var item in drafts)
            {
                <div class="field">
                    <div class="columns is-variable is-multiline is-2">
                        <div class="column is-full">
                            <label class="label">Gửi đến</label>
                            <div class="control" style="padding-bottom : 10px">
                                <div class="title is-6 is-size-6-mobile has-text-info">
                                    TỔNG CÔNG TY
                                </div>
                            </div>
                            <div class="field">
                                <label class="label">Lý do bạn muốn góp ý *</label>
                                <div class="control">
                                    <div class="select is-fullwidth is_bg">
                                        <select @bind="item.type">
                                            <option value="">Chọn lý do</option>
                                            @foreach (var sl in listConfigSuggest)
                                            {
                                                <option value="@sl.id">@sl.name</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="column is-full">
                            <div class="field">
                                <label class="label">
                                    <span>Nội dung mục góp ý *</span>
                                    <a class="icon is-pulled-right has-text-info" @onclick="() => DeleteItem(item)">
                                        <i class="material-icons-outlined">close</i>
                                    </a>
                                </label>
                                <div class="control">
                                    <textarea @bind="item.name" class="textarea is_bg"
                                        placeholder="Bạn muốn công ty dành nguồn lực tập trung vào mục tiêu / điều gì trong quý tới... " />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </Body>
        <Footer>
            <div class="field is-grouped is-grouped-right">
                <div class="control">
                    <Button Content="Thêm" IconLeft="add" IsInverted Color="@ComponentModel.ColorType.Link" Onclick="Add" />
                </div>
                <div class="control">
                    <Button Content="Lưu nháp" IconLeft="save" Color="@ComponentModel.ColorType.Info"
                        Onclick="() => Update(true)" />
                </div>
                <div class="control">
                    <Button Content="Gửi góp ý" IconLeft="done" Color="@ComponentModel.ColorType.Link"
                        Onclick="() => Update(false)" />
                </div>
            </div>
        </Footer>
    </Slider>
}

@code {
    [CascadingParameter]
    public MainLayout Layout { get; set; }
    private bool _loaded = false;
    private bool success = false;
    private string _message = string.Empty;
    private string _title = "OKRs - Góp ý mục tiêu";
    private List<Cycles> listCycles = new();
    private List<Suggest> database = new();
    private List<ConfigSuggest> listConfigSuggest = new();
    private List<Suggest> dataList = new();
    private List<Suggest> drafts = null;
    private string typeId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        listConfigSuggest = await DBConfigSuggest.GetAllConfigSuggest();
        database = await DBSuggest.GetAll(Layout.Cycle);
        listCycles = await DBCycles.GetAllCycles();
        await Search();
        _loaded = true;
    }
    private async Task<bool> Search()
    {
        try
        {
            dataList = await DBSuggest.GetList(Layout.Cycle, null);
            if (!string.IsNullOrEmpty(typeId))
                dataList = dataList.Where(x => x.type == typeId).ToList();
            return true;
        }
        catch (Exception ex)
        {
            return false;
        }
    }

    private async Task ChangeType(ChangeEventArgs e)
    {
        typeId = e.Value.ToString();
        await Search();
    }

    private async Task<bool> DeleteItem(Suggest item)
    {
        try
        {
            if (!await jsruntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa mục này"))
                return true;

            drafts.Remove(item);
            await DBSuggest.Delete(item.id);
            return true;
        }
        catch (Exception ex)
        {
            return false;
        }
    }

    private async Task<bool> Add()
    {
        try
        {
            var item = new Suggest()
                {
                    user = Layout.User.Id,
                    cycle = Layout.Cycle,
                    draft = true
                };

            item = await DBSuggest.Create(item);

            drafts.Add(item);
            return true;
        }
        catch (Exception ex)
        {
            return false;
        }
    }

    private async Task<bool> Edit()
    {
        bool _success = true;
        try
        {
            if (listCycles.Count == 0)
            {
                await jsruntime.InvokeVoidAsync("tagline", false, "Chưa có chu kỳ!");
            }
            else
            {
                drafts = await DBSuggest.GetDrafts(Layout.Cycle, Layout.User.Id);
                if (drafts.Count == 0)
                    await Add();
            }
        }
        catch (Exception ex)
        {
            _success = false;
        }
        return _success;
    }

    private async Task<bool> Update(bool isDraft)
    {
        try
        {
            success = false;
            _message = string.Empty;
            if (drafts.Where(x => string.IsNullOrEmpty(x.type)).Count() > 0
            || drafts.Where(x => string.IsNullOrEmpty(x.name)).Count() > 0)
            {
                _message = "Nhập các trường bắt buộc (*) hoặc xóa góp ý không cần thiết !";
                await jsruntime.InvokeVoidAsync("tagline", false, _message);
                _message = string.Empty;
            }
            else
            {
                foreach (var item in drafts)
                {
                    item.date = DateTime.Now.Ticks;
                    item.draft = isDraft;
                    await DBSuggest.Update(item);
                }
                drafts = null;
                await Search();
            }
            return true;
        }
        catch (Exception ex)
        {
            return false;
        }
    }
}